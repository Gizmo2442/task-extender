diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
:...skipping...                                                                                                     diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
:...skipping...                                                                                                     diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
:...skipping...                                                                                                     diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
         for (let hour = 0; hour < 24; hour++) {
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
         for (let hour = 0; hour < 24; hour++) {
             const timeSlot = this.timelineEl.createEl('div', { cls: 'time-slot' });
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
         for (let hour = 0; hour < 24; hour++) {
             const timeSlot = this.timelineEl.createEl('div', { cls: 'time-slot' });
+            timeSlot.style.height = `${this.hourHeight}px`;
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
         for (let hour = 0; hour < 24; hour++) {
             const timeSlot = this.timelineEl.createEl('div', { cls: 'time-slot' });
+            timeSlot.style.height = `${this.hourHeight}px`;

:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
         for (let hour = 0; hour < 24; hour++) {
             const timeSlot = this.timelineEl.createEl('div', { cls: 'time-slot' });
+            timeSlot.style.height = `${this.hourHeight}px`;

             const timeLabel = timeSlot.createEl('div', {
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
         for (let hour = 0; hour < 24; hour++) {
             const timeSlot = this.timelineEl.createEl('div', { cls: 'time-slot' });
+            timeSlot.style.height = `${this.hourHeight}px`;

             const timeLabel = timeSlot.createEl('div', {
                 cls: 'time-label',
:...skipping...
diff --git a/src/TimelineView.ts b/src/TimelineView.ts
index 2186c9a..2e5d825 100644
--- a/src/TimelineView.ts
+++ b/src/TimelineView.ts
@@ -5,6 +5,12 @@ import type { ScheduledTask } from './models/ScheduledTask';
 import type { TimeBlock } from './models/TimeBlock';
 import { debounce } from 'obsidian';

+interface TaskIdentity {
+    identifier: string;  // Either plugin ID or content hash
+    originalContent: string;
+    metadata: TaskMetadata;
+}
+
 export class TimelineView extends View {
     private plugin: TaskPlannerPlugin;
     private timelineEl: HTMLElement;
@@ -15,10 +21,13 @@ export class TimelineView extends View {
     private timeBlocks: Map<string, TimeBlock> = new Map();
     private isCreatingTimeBlock: boolean = false;
     private timeBlockStart: number | null = null;
-    private taskCache: Map<string, {content: string, metadata: TaskMetadata}> = new Map();
+    private taskCache: Map<string, TaskIdentity> = new Map();
     private fileCache: Map<string, string> = new Map();
     private refreshDebounceTimer: number | null = null;
     private debouncedRefresh: () => void;
+    private hourHeight: number = 80; // Default height doubled from 40
+    private minHourHeight: number = 40;
+    private maxHourHeight: number = 200;

     constructor(leaf: WorkspaceLeaf, plugin: TaskPlannerPlugin) {
         super(leaf);
@@ -45,11 +54,21 @@ export class TimelineView extends View {
         const headerEl = mainContainer.createEl('div', { cls: 'timeline-header' });
         headerEl.createEl('h4', { text: `Timeline for ${moment().format('MMMM D, YYYY')}` });

+        // Create controls
+        const controlsEl = headerEl.createEl('div', { cls: 'timeline-controls' });
+        const zoomInBtn = controlsEl.createEl('button', { text: '🔍+' });
+        const zoomOutBtn = controlsEl.createEl('button', { text: '🔍-' });
+
+        zoomInBtn.addEventListener('click', () => this.zoom(1.2));
+        zoomOutBtn.addEventListener('click', () => this.zoom(0.8));
+
         // Create timeline container
         this.timelineEl = mainContainer.createEl('div', { cls: 'timeline-container' });

         // Create unscheduled tasks area
         const unscheduledArea = mainContainer.createEl('div', { cls: 'unscheduled-tasks' });
+        unscheduledArea.style.flex = '0 0 auto'; // Don't allow flex growth
+        unscheduledArea.style.maxHeight = '20vh'; // Limit height to 20% of viewport height
         unscheduledArea.createEl('h6', { text: 'Unscheduled Tasks' });
         const dropZone = unscheduledArea.createEl('div', {
             cls: 'unscheduled-drop-zone',
@@ -76,6 +95,7 @@ export class TimelineView extends View {
     private createTimeSlots() {
         for (let hour = 0; hour < 24; hour++) {
             const timeSlot = this.timelineEl.createEl('div', { cls: 'time-slot' });
+            timeSlot.style.height = `${this.hourHeight}px`;

             const timeLabel = timeSlot.createEl('div', {
                 cls: 'time-label',
@@ -118,6 +138,18 @@ export class TimelineView extends View {
                 this.timeBlockStart = null;
             }
         });
+
+        // Add scroll zoom handler to timeline container
+        this.timelineEl.addEventListener('wheel', (e: WheelEvent) => {
+            if (e.ctrlKey) {
+                e.preventDefault();
+                const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
+                // Pass the relative Y position of the mouse in the container
+                const rect = this.timelineEl.getBoundingClientRect();
+                const mouseY = e.clientY - rect.top;
+                this.zoom(zoomFactor, mouseY);
+            }
+        });
     }

     private setupDropZone(element: HTMLElement) {
@@ -144,15 +176,15 @@ export class TimelineView extends View {
                     oldTaskEl.remove();
                 }

-                const metadata = TaskParser.parseTask(taskText, this.plugin.settings);
+                const taskIdentity = this.getTaskIdentity(taskText);
                 this.scheduledTasks.set(taskKey, {
                     taskText: taskKey,
                     timeSlot: timeSlot === 'unscheduled' ? 'unscheduled' : parseInt(timeSlot),
-                    metadata
+                    metadata: taskIdentity.metadata
                 });

                 await this.saveScheduledTasks();
-                this.createTaskElement(taskText, metadata);
+                this.createTaskElement(taskText, taskIdentity);
             }
         });
     }
@@ -180,17 +212,15 @@ export class TimelineView extends View {
             const lines = content.split('\n');
             for (const line of lines) {
                 if (line.match(/^- \[[ x]\]/)) {
-                    const taskKey = this.getTaskKey(line);
+                    const taskIdentity = this.getTaskIdentity(line);

-                    if (!this.taskCache.has(taskKey)) {
-                        const metadata = TaskParser.parseTask(line, this.plugin.settings);
-                        this.taskCache.set(taskKey, {content: line, metadata});
+                    if (!this.taskCache.has(taskIdentity.identifier)) {
+                        this.taskCache.set(taskIdentity.identifier, taskIdentity);
                     }

-                    const cached = this.taskCache.get(taskKey)!;
-                    if (cached.metadata.dueDate &&
-                        moment(cached.metadata.dueDate).format('YYYY-MM-DD') === today) {
-                        this.createTaskElement(cached.content, cached.metadata);
+                    if (taskIdentity.metadata.dueDate &&
+                        moment(taskIdentity.metadata.dueDate).format('YYYY-MM-DD') === today) {
+                        this.createTaskElement(line, taskIdentity);
                     }
                 }
             }
@@ -212,7 +242,13 @@ export class TimelineView extends View {
             if (match) {
                 try {
                     const scheduledTasks = JSON.parse(match[1]);
-                    this.scheduledTasks = new Map(Object.entries(scheduledTasks));
+                    for (const [key, task] of Object.entries(scheduledTasks)) {
+                        const taskIdentity = this.getTaskIdentity((task as ScheduledTask).taskText);
+                        this.scheduledTasks.set(key, {
+                            ...(task as ScheduledTask),
+                            metadata: taskIdentity.metadata
+                        });
+                    }
                 } catch (e) {
                     console.error('Failed to parse scheduled tasks:', e);
                 }
@@ -283,7 +319,7 @@ export class TimelineView extends View {
                         if (line.match(/^- \[[ x]\]/)) {
                             const metadata = TaskParser.parseTask(line, this.plugin.settings);
                             if (metadata.dueDate && moment(metadata.dueDate).format('YYYY-MM-DD') === today) {
-                                this.createTaskElement(line, metadata);
+                                this.createTaskElement(line, this.getTaskIdentity(line));
                             }
                         }
                     }
@@ -331,11 +367,11 @@ export class TimelineView extends View {
             unscheduledDropZone.empty();

             // Add unscheduled tasks to the unscheduled drop zone
-            this.taskElements.forEach((taskEl, taskKey) => {
+            this.taskElements.forEach((taskEl, identifier) => {
                 // Check if task is not in any time block
                 let isScheduled = false;
                 this.timeBlocks.forEach(block => {
-                    if (block.tasks.includes(taskKey)) {
+                    if (block.tasks.includes(identifier)) {
                         isScheduled = true;
                     }
                 });
@@ -343,7 +379,7 @@ export class TimelineView extends View {
                 if (!isScheduled) {
                     const clonedTask = taskEl.cloneNode(true) as HTMLElement;
                     // Re-attach drag event listeners
-                    this.setupTaskDragListeners(clonedTask, taskKey);
+                    this.setupTaskDragListeners(clonedTask, identifier);
                     unscheduledDropZone.appendChild(clonedTask);
                 }
             });
@@ -356,22 +392,32 @@ export class TimelineView extends View {
         this.timelineEl.scrollTop = scrollPosition;
     }

-    private createTaskElement(taskText: string, metadata: TaskMetadata): HTMLElement | null {
-        const taskKey = this.getTaskKey(taskText);
-        const scheduledTask = this.scheduledTasks.get(taskKey);
-
+    private async createTaskElement(taskText: string, taskIdentity: TaskIdentity): Promise<HTMLElement | null> {
         // Create task container
         const taskEl = document.createElement('div');
         taskEl.addClass('timeline-task');
-        taskEl.setAttribute('data-task', taskKey);
+        taskEl.setAttribute('data-task', taskIdentity.identifier);

         // Create task text container with checkbox
         const textEl = document.createElement('div');
         textEl.addClass('task-text');

+        // Find current task status by searching files
+        let currentTaskStatus = false;
+        const files = this.app.vault.getMarkdownFiles();
+        for (const file of files) {
+            const content = await this.app.vault.read(file);
+            const lines = content.split('\n');
+            const taskLine = lines.find(line => line.includes(taskIdentity.identifier));
+            if (taskLine) {
+                currentTaskStatus = taskLine.includes('- [x]');
+                break;
+            }
+        }
+
         // Use Obsidian's markdown renderer for the checkbox
-        const taskMarkdown = taskText.replace(/^- \[([ x])\]/, (match, checked) => {
-            return `<input type="checkbox" ${checked === 'x' ? 'checked' : ''}>`;
+        const taskMarkdown = taskText.replace(/^- \[([ x])\]/, () => {
+            return `<input type="checkbox" ${currentTaskStatus ? 'checked' : ''}>`;
         });

         // Use Obsidian's markdown processor
@@ -391,20 +437,36 @@ export class TimelineView extends View {
                 for (const file of files) {
                     const content = await this.app.vault.read(file);
                     const lines = content.split('\n');
-                    // Look for the task content instead of the full task text
-                    const lineIndex = lines.findIndex(line => line.includes(taskKey));
+                    const lineIndex = lines.findIndex(line => line.includes(taskIdentity.identifier));

                     if (lineIndex !== -1) {
+                        const originalLine = lines[lineIndex];
                         const newContent = lines.map((line, index) => {
                             if (index === lineIndex) {
-                                return checkbox.checked
-                                    ? `- [x] ${taskKey}`
-                                    : `- [ ] ${taskKey}`;
+                                if (checkbox.checked) {
+                                    // Add completion date when checking
+                                    return originalLine.replace(/^- \[ \]/, '- [x]') +
+                                           (originalLine.includes('✅') ? '' : ` ✅ ${moment().format('YYYY-MM-DD')}`);
+                                } else {
+                                    // Remove completion date when unchecking
+                                    return originalLine.replace(/^- \[x\]/, '- [ ]').replace(/✅ \d{4}-\d{2}-\d{2}/, '').trim();
+                                }
                             }
                             return line;
                         }).join('\n');

                         await this.app.vault.modify(file, newContent);
+
+                        // Update the task's display
+                        const updatedTaskIdentity = this.getTaskIdentity(lines[lineIndex]);
+                        this.taskCache.set(updatedTaskIdentity.identifier, updatedTaskIdentity);
+
+                        // Re-render the task element
+                        const newTaskEl = await this.createTaskElement(lines[lineIndex], updatedTaskIdentity);
+                        if (newTaskEl) {
+                            taskEl.replaceWith(newTaskEl);
+                        }
+
                         break;
                     }
                 }
@@ -414,18 +476,18 @@ export class TimelineView extends View {
         taskEl.appendChild(textEl);

         // Add time estimate if available
-        if (metadata.timeEstimate) {
+        if (taskIdentity.metadata.timeEstimate) {
             const estimateEl = document.createElement('div');
             estimateEl.addClass('task-estimate');
-            estimateEl.setText(`Estimated: ${this.formatTimeEstimate(metadata.timeEstimate)}`);
+            estimateEl.setText(`Estimated: ${this.formatTimeEstimate(taskIdentity.metadata.timeEstimate)}`);
             taskEl.appendChild(estimateEl);
         }

         // Add drag listeners
-        this.setupTaskDragListeners(taskEl, taskKey);
+        this.setupTaskDragListeners(taskEl, taskIdentity.identifier);

-        // Store reference to element
-        this.taskElements.set(taskKey, taskEl);
+        // Store reference using identifier
+        this.taskElements.set(taskIdentity.identifier, taskEl);

         return taskEl;
     }
@@ -463,13 +525,18 @@ export class TimelineView extends View {
     }

     private renderTimeBlock(block: TimeBlock, parent: DocumentFragment | HTMLElement) {
+        // Remove existing block if it exists
+        const existingBlock = this.timelineEl.querySelector(`[data-block-id="${block.id}"]`);
+        if (existingBlock) {
+            existingBlock.remove();
+        }
+
         const blockEl = document.createElement('div');
         blockEl.addClass('time-block');
+        blockEl.setAttribute('data-block-id', block.id);

-        // Calculate position based on hours
-        const hourHeight = 40;
-        const top = block.startHour * hourHeight;
-        const height = (block.endHour - block.startHour) * hourHeight;
+        const top = block.startHour * this.hourHeight;
+        const height = (block.endHour - block.startHour) * this.hourHeight;

         blockEl.style.top = `${top}px`;
         blockEl.style.height = `${height}px`;
@@ -479,10 +546,8 @@ export class TimelineView extends View {
             text: block.title
         });

-        // Make the block a drop target for tasks
         this.setupBlockDropZone(blockEl, block.id);

-        // Render existing tasks
         block.tasks.forEach(taskKey => {
             this.renderTaskInBlock(taskKey, blockEl);
         });
@@ -490,40 +555,18 @@ export class TimelineView extends View {
         parent.appendChild(blockEl);
     }

-    private renderTaskInBlock(taskKey: string, container: HTMLElement) {
-        const taskEl = this.taskElements.get(taskKey);
+    private async renderTaskInBlock(taskKey: string, container: HTMLElement) {
+        // First get the latest task content from cache
+        const taskIdentity = this.taskCache.get(taskKey);
+        if (!taskIdentity) {
+            console.warn('Task not found in cache:', taskKey);
+            return;
+        }
+
+        // Create a new task element with the latest content
+        const taskEl = await this.createTaskElement(taskIdentity.originalContent, taskIdentity);
         if (taskEl) {
-            const clonedTask = taskEl.cloneNode(true) as HTMLElement;
-
-            // Remove the date from the task text
-            const taskText = clonedTask.querySelector('.task-text') as HTMLElement;
-            if (taskText) {
-                const text = taskText.textContent || '';
-                const dateRemoved = text.replace(/📅 \d{4}-\d{2}-\d{2}/, '').trim();
-
-                // Render without the list item markup
-                taskText.empty();
-                MarkdownRenderer.renderMarkdown(
-                    `<input type="checkbox"> ${dateRemoved}`,
-                    taskText,
-                    '',
-                    this
-                );
-            }
-
-            // Re-attach event listeners to the cloned checkbox
-            const checkbox = clonedTask.querySelector('input[type="checkbox"]') as HTMLInputElement;
-            if (checkbox) {
-                checkbox.addEventListener('click', async (e) => {
-                    e.stopPropagation();
-                    const originalCheckbox = taskEl.querySelector('input[type="checkbox"]') as HTMLInputElement;
-                    if (originalCheckbox) {
-                        originalCheckbox.click();
-                    }
-                });
-            }
-
-            container.appendChild(clonedTask);
+            container.appendChild(taskEl);
         }
     }

@@ -546,9 +589,8 @@ export class TimelineView extends View {
         // Calculate position
         const start = Math.min(startHour, currentHour);
         const end = Math.max(startHour, currentHour) + 1;
-        const hourHeight = 40;
-        const top = start * hourHeight;
-        const height = (end - start) * hourHeight;
+        const top = start * this.hourHeight;
+        const height = (end - start) * this.hourHeight;

         previewEl.style.top = `${top}px`;
         previewEl.style.height = `${height}px`;
@@ -599,22 +641,22 @@ export class TimelineView extends View {
         element.addEventListener('drop', async (e) => {
             e.preventDefault();
             element.removeClass('drag-over');
-            const taskKey = e.dataTransfer?.getData('text/plain');
+            const taskIdentifier = e.dataTransfer?.getData('text/plain');

-            if (taskKey) {
-                const timeBlock = this.timeBlocks.get(blockId);
-                if (timeBlock && !timeBlock.tasks.includes(taskKey)) {
+            if (taskIdentifier && this.timeBlocks.has(blockId)) {
+                const timeBlock = this.timeBlocks.get(blockId)!;
+                if (!timeBlock.tasks.includes(taskIdentifier)) {
                     // Remove task from any other blocks
                     this.timeBlocks.forEach(block => {
-                        block.tasks = block.tasks.filter(t => t !== taskKey);
+                        block.tasks = block.tasks.filter(t => t !== taskIdentifier);
                     });

                     // Add task to this block
-                    timeBlock.tasks.push(taskKey);
+                    timeBlock.tasks.push(taskIdentifier);

                     // Clear and re-render tasks
                     element.empty();
-                    timeBlock.tasks.forEach(key => this.renderTaskInBlock(key, element));
+                    timeBlock.tasks.forEach(id => this.renderTaskInBlock(id, element));

                     await this.saveTimeBlocks();
                 }
@@ -632,10 +674,10 @@ export class TimelineView extends View {
     }

     // Add this new method to handle task drag events
-    private setupTaskDragListeners(taskEl: HTMLElement, taskKey: string) {
+    private setupTaskDragListeners(taskEl: HTMLElement, identifier: string) {
         taskEl.setAttribute('draggable', 'true');
         taskEl.addEventListener('dragstart', (e) => {
-            e.dataTransfer?.setData('text/plain', taskKey);
+            e.dataTransfer?.setData('text/plain', identifier);
             taskEl.addClass('dragging');
         });

@@ -643,6 +685,75 @@ export class TimelineView extends View {
             taskEl.removeClass('dragging');
         });
     }
+
+    private zoom(factor: number, mouseY?: number) {
+        const newHeight = Math.min(Math.max(this.hourHeight * factor, this.minHourHeight), this.maxHourHeight);
+        if (newHeight !== this.hourHeight) {
+            // If mouseY is provided, maintain the same timeline position under cursor
+            if (mouseY !== undefined) {
+                const container = this.timelineEl;
+                const scrollBefore = container.scrollTop;
+                const hourUnderMouse = (scrollBefore + mouseY) / this.hourHeight;
+
+                this.hourHeight = newHeight;
+
+                // Update all elements
+                this.timelineEl.querySelectorAll('.time-slot').forEach((slot: HTMLElement) => {
+                    slot.style.height = `${this.hourHeight}px`;
+                });
+                this.timeBlocks.forEach(block => {
+                    const blockEl = this.timelineEl.querySelector(`[data-block-id="${block.id}"]`) as HTMLElement;
+                    if (blockEl) {
+                        blockEl.style.top = `${block.startHour * this.hourHeight}px`;
+                        blockEl.style.height = `${(block.endHour - block.startHour) * this.hourHeight}px`;
+                    }
+                });
+
+                // Adjust scroll to keep the same hour under mouse
+                const newScrollTop = (hourUnderMouse * this.hourHeight) - mouseY;
+                container.scrollTop = newScrollTop;
+            } else {
+                // Regular zoom without mouse position
+                this.hourHeight = newHeight;
+                this.timelineEl.querySelectorAll('.time-slot').forEach((slot: HTMLElement) => {
+                    slot.style.height = `${this.hourHeight}px`;
+                });
+                this.timeBlocks.forEach(block => {
+                    const blockEl = this.timelineEl.querySelector(`[data-block-id="${block.id}"]`) as HTMLElement;
+                    if (blockEl) {
+                        blockEl.style.top = `${block.startHour * this.hourHeight}px`;
+                        blockEl.style.height = `${(block.endHour - block.startHour) * this.hourHeight}px`;
+                    }
+                });
+            }
+        }
+    }
+
+    private getTaskIdentity(taskText: string): TaskIdentity {
+        const metadata = TaskParser.parseTask(taskText, this.plugin.settings);
+
+        // Try to get plugin ID
+        const idMatch = taskText.match(/   ([a-zA-Z0-9]+)/);
+        if (idMatch) {
+            return {
+                identifier: idMatch[1],
+                originalContent: taskText,
+                metadata
+            };
+        }
+
+        // Get the core task content without checkbox and metadata
+        const baseContent = taskText
+            .replace(/^- \[[ x]\] /, '')  // Remove checkbox
+            .replace(/(?:📅|✅|🆔|📝|⏫|🔼|🔽|⏬|📌|⚡|➕|⏳|📤|📥|💤|❗|❌|✔️|⏰|🔁|🔂|🛫|🛬|📍|🕐|🔍|🎯|🎫|💯|👥|
👤|📋|✍️|👉|👈|⚠️) .*?(?=(?:📅|✅|🆔|📝|⏫|🔼|🔽|⏬|📌|⚡|➕|⏳|📤|📥|💤|❗|❌|✔️|⏰|🔁|🔂|🛫|🛬|📍|🕐|🔍|🎯|🎫|💯| 👥|
👤|📋|✍️|👉|👈|⚠️)|$)/g, '')  // Remove metadata
+            .trim();
+
+        return {
+            identifier: baseContent,
+            originalContent: taskText,
+            metadata
+        };
+    }
 }

 class TimeBlockModal extends Modal {
diff --git a/styles.css b/styles.css
index 1225963..965ba91 100644
--- a/styles.css
+++ b/styles.css
@@ -16,12 +16,13 @@ If your plugin does not need CSS, delete this file.
 }

 .timeline-container {
-    flex: 1;
+    flex: 1 1 auto;  /* Allow container to grow and shrink */
     overflow-y: auto;
     position: relative;
     border: 1px solid var(--background-modifier-border);
     border-radius: 4px;
     margin: 10px 0;
+    min-height: 0;   /* Allow container to shrink below content size */
 }

 .time-slot {
@@ -29,6 +30,7 @@ If your plugin does not need CSS, delete this file.
     grid-template-columns: 60px 1fr;
     min-height: 40px;
     border-bottom: 1px solid var(--background-modifier-border);
+    transition: height 0.2s ease;
 }

 .time-label {
@@ -60,6 +62,7 @@ If your plugin does not need CSS, delete this file.
     padding: 10px;
     border: 1px solid var(--background-modifier-border);
     border-radius: 4px;
+    overflow-y: auto;  /* Add scrolling if content overflows */
 }

 .unscheduled-drop-zone {
@@ -184,3 +187,21 @@ If your plugin does not need CSS, delete this file.
     opacity: 0.3;
     pointer-events: none;
 }
+
+.timeline-controls {
+    display: flex;
+    gap: 8px;
+    margin-left: 16px;
+}
+
+.timeline-controls button {
+    padding: 4px 8px;
+    cursor: pointer;
+    border-radius: 4px;
+    border: 1px solid var(--background-modifier-border);
+    background: var(--background-primary);
+}
+
+.timeline-controls button:hover {
+    background: var(--background-modifier-hover);
+}